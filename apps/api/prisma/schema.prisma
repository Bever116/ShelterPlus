generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlayerStatus {
  ALIVE
  OUT
}

enum PlayerRole {
  PLAYER
  SPECTATOR
}

enum CardCategory {
  Profession
  Bio
  Health
  Hobby
  Phobia
  Personality
  ExtraInfo
  Knowledge
  Luggage
  ActionCard
  ConditionCard
}

model Lobby {
  id                String            @id @default(uuid())
  mode              LobbyMode
  rounds            Int
  minuteDurationSec Int
  enabledCategories Json
  channelsConfig    Json
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  players           LobbyPlayer[]
  game              Game?
}

enum LobbyMode {
  OFFICIAL
  CUSTOM
  WEB
}

model LobbyPlayer {
  id        String   @id @default(uuid())
  lobby     Lobby    @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  lobbyId   String
  number    Int
  nickname  String
  discordId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id          String      @id @default(uuid())
  lobby       Lobby       @relation(fields: [lobbyId], references: [id])
  lobbyId     String      @unique
  apocalypse  String
  bunker      String
  seats       Int
  currentRound Int        @default(0)
  isSpectatorsEnabled Boolean @default(true)
  ending      Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  players     Player[]
  events      GameEvent[]
  votes       Vote[]
  minuteQueue MinuteRequest[]
  revealPlans RevealPlan[]
  admins      GameAdmin[]
  invites     Invite[]
}

model Player {
  id        String       @id @default(uuid())
  game      Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  discordId String?
  number    Int
  nickname  String
  status    PlayerStatus @default(ALIVE)
  role      PlayerRole   @default(PLAYER)
  cards     Card[]
  votes     Vote[]       @relation("VoteVoter")
  targetedBy Vote[]      @relation("VoteTarget")
  minuteRequests MinuteRequest[]
  revealPlans RevealPlan[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model GameAdmin {
  id        String        @id @default(uuid())
  game      Game          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  userId    String
  role      GameAdminRole
  createdAt DateTime      @default(now())

  @@unique([gameId, userId])
}

enum GameAdminRole {
  HOST
  CO_HOST
}

model Card {
  id        String       @id @default(uuid())
  player    Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  String
  category  CardCategory
  payload   Json
  isOpen    Boolean      @default(false)
  openedAt  DateTime?
  openedRound Int?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model GameEvent {
  id        String   @id @default(uuid())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  type      String
  payload   Json
  createdAt DateTime @default(now())
}

model Vote {
  id             String       @id @default(uuid())
  game           Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId         String
  round          Int
  voter          Player       @relation("VoteVoter", fields: [voterPlayerId], references: [id], onDelete: Cascade)
  voterPlayerId  String
  target         Player?      @relation("VoteTarget", fields: [targetPlayerId], references: [id], onDelete: SetNull)
  targetPlayerId String?
  source         VoteSource
  updatedAt      DateTime     @updatedAt
  createdAt      DateTime     @default(now())

  @@unique([gameId, round, voterPlayerId])
}

enum VoteSource {
  WEB
  DISCORD
}

model MinuteRequest {
  id          String       @id @default(uuid())
  game        Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId      String
  round       Int
  player      Player       @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId    String
  position    Int
  approved    Boolean      @default(false)
  startedAt   DateTime?
  durationSec Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([gameId, round, playerId])
}

model RevealPlan {
  id        String   @id @default(uuid())
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  round     Int
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  playerId  String
  categories Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, playerId, round])
}

model Invite {
  id        String     @id @default(uuid())
  game      Game       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String
  code      String     @unique
  role      InviteRole
  expiresAt DateTime
  usedByUserId String?
  createdAt DateTime  @default(now())

  @@index([gameId, role])
}

enum InviteRole {
  CO_HOST
  SPECTATOR
}
